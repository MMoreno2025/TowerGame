/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package com.mycompany.spacetowerdefense;

/**
 *
 * @author CMcPhail2026
 */
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.awt.geom.Point2D;

public class SpaceTowerDefense extends JPanel implements ActionListener, MouseListener {
    // Window dimensions
    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;
    
    // Game state
    private int money = 100;
    private int health = 100;
    private int round = 1;
    private boolean gameOver = false;
    private Timer gameTimer;
    private long lastSpawnTime = 0;
    private long spawnDelay = 2000;
    private int shipsToSpawn = 5;
    private int shipsSpawned = 0;
    
    // Game elements
    private ArrayList<Tower> towers = new ArrayList<>();
    private ArrayList<Spaceship> spaceships = new ArrayList<>();
    private ArrayList<Projectile> projectiles = new ArrayList<>();
    private ArrayList<Point> placementLocations = new ArrayList<>();
    private Tower selectedTower = null;
    private Point2D.Float[] path;
    
    // Current placement position when building
    private Point currentPlacement = null;
    
    public SpaceTowerDefense() {
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setBackground(Color.BLACK);
        addMouseListener(this);
        
        // Initialize game timer (60 FPS)
        gameTimer = new Timer(16, this);
        
        // Define path points (x, y coordinates)
        path = new Point2D.Float[] {
            new Point2D.Float(-50, 300),  // Start off-screen
            new Point2D.Float(100, 300),
            new Point2D.Float(200, 300),
            new Point2D.Float(300, 200),
            new Point2D.Float(400, 200),
            new Point2D.Float(500, 300),
            new Point2D.Float(600, 300),
            new Point2D.Float(700, 200),
            new Point2D.Float(850, 200)   // End off-screen
        };
        
        // Define tower placement locations
        placementLocations.add(new Point(150, 240));
        placementLocations.add(new Point(150, 360));
        placementLocations.add(new Point(250, 240));
        placementLocations.add(new Point(250, 360));
        placementLocations.add(new Point(350, 140));
        placementLocations.add(new Point(350, 260));
        placementLocations.add(new Point(450, 140));
        placementLocations.add(new Point(450, 260));
        placementLocations.add(new Point(550, 240));
        placementLocations.add(new Point(550, 360));
        placementLocations.add(new Point(650, 240));
        placementLocations.add(new Point(650, 360));
        
        gameTimer.start();
    }
    
    // Main game loop
    @Override
    public void actionPerformed(ActionEvent e) {
        if (gameOver) return;
        
        // Spawn spaceships
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastSpawnTime > spawnDelay && shipsSpawned < shipsToSpawn) {
            spawnSpaceship();
            lastSpawnTime = currentTime;
            shipsSpawned++;
        }
        
        // Start next round if all ships are spawned and destroyed/escaped
        if (shipsSpawned >= shipsToSpawn && spaceships.isEmpty()) {
            startNextRound();
        }
        
        // Update all game elements
        updateSpaceships();
        updateTowers();
        updateProjectiles();
        checkCollisions();
        
        // Check game over condition
        if (health <= 0) {
            gameOver = true;
        }
        
        repaint();
    }
    
    private void startNextRound() {
        round++;
        shipsToSpawn = 5 + round;
        shipsSpawned = 0;
        spawnDelay = Math.max(500, 2000 - round * 100);
    }
    
    private void spawnSpaceship() {
        int health = round;
        float speed = 1.0f + (round * 0.1f);
        spaceships.add(new BasicSpaceship(path, health, speed));
    }
    
    private void updateSpaceships() {
        Iterator<Spaceship> it = spaceships.iterator();
        while (it.hasNext()) {
            Spaceship ship = it.next();
            ship.move();
            
            // Remove ship and decrease health if it reaches the end
            if (ship.hasReachedEnd()) {
                health -= ship.getDamage();
                it.remove();
            }
        }
    }
    
    private void updateTowers() {
        for (Tower tower : towers) {
            tower.update();
            
            // Fire at nearest ship in range
            if (tower.canFire()) {
                Spaceship target = findNearestSpaceshipInRange(tower);
                if (target != null) {
                    Projectile projectile = tower.fire(target);
                    if (projectile != null) {
                        projectiles.add(projectile);
                    }
                }
            }
        }
    }
    
    private Spaceship findNearestSpaceshipInRange(Tower tower) {
        Spaceship nearest = null;
        double minDistance = Double.MAX_VALUE;
        
        for (Spaceship ship : spaceships) {
            double distance = Point2D.distance(tower.getX(), tower.getY(), ship.getX(), ship.getY());
            if (distance <= tower.getRange() && distance < minDistance) {
                minDistance = distance;
                nearest = ship;
            }
        }
        
        return nearest;
    }
    
    private void updateProjectiles() {
        Iterator<Projectile> it = projectiles.iterator();
        while (it.hasNext()) {
            Projectile projectile = it.next();
            projectile.move();
            
            // Remove projectile if it's off-screen
            if (projectile.isOffScreen(WIDTH, HEIGHT)) {
                it.remove();
            }
        }
    }
    
    private void checkCollisions() {
        Iterator<Projectile> projIt = projectiles.iterator();
        
        while (projIt.hasNext()) {
            Projectile projectile = projIt.next();
            boolean collided = false;
            
            Iterator<Spaceship> shipIt = spaceships.iterator();
            while (shipIt.hasNext() && !collided) {
                Spaceship ship = shipIt.next();
                
                // Check collision
                if (projectile.collidesWith(ship)) {
                    ship.takeDamage(projectile.getDamage());
                    projIt.remove();
                    collided = true;
                    
                    // Remove ship if destroyed and add money
                    if (ship.isDestroyed()) {
                        money += ship.getReward();
                        shipIt.remove();
                    }
                }
            }
            
            if (collided) break;
        }
    }
    
    // Tower placement on click
    @Override
    public void mouseClicked(MouseEvent e) {
        if (gameOver) return;
        
        int x = e.getX();
        int y = e.getY();
        
        // Check if a tower is clicked
        for (Tower tower : towers) {
            if (tower.contains(x, y)) {
                selectedTower = tower;
                
                // Rotate tower if clicked
                selectedTower.rotate();
                return;
            }
        }
        
        selectedTower = null;
        
        // Check if a valid placement location is clicked
        for (Point loc : placementLocations) {
            Rectangle towerRect = new Rectangle(loc.x - 20, loc.y - 20, 40, 40);
            if (towerRect.contains(x, y)) {
                // Check if tower already exists at this location
                boolean towerExists = false;
                for (Tower tower : towers) {
                    if (tower.getX() == loc.x && tower.getY() == loc.y) {
                        towerExists = true;
                        break;
                    }
                }
                
                if (!towerExists) {
                    // Place tower if enough money
                    int basicTowerCost = 50;
                    if (money >= basicTowerCost) {
                        towers.add(new BasicTower(loc.x, loc.y));
                        money -= basicTowerCost;
                    }
                }
                return;
            }
        }
    }
    
    // Required MouseListener methods
    @Override
    public void mousePressed(MouseEvent e) {}
    
    @Override
    public void mouseReleased(MouseEvent e) {}
    
    @Override
    public void mouseEntered(MouseEvent e) {}
    
    @Override
    public void mouseExited(MouseEvent e) {}
    
    // Draw all game elements
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        
        // Draw space background with stars
        drawBackground(g2d);
        
        // Draw path
        drawPath(g2d);
        
        // Draw placement locations
        drawPlacementLocations(g2d);
        
        // Draw towers
        for (Tower tower : towers) {
            tower.draw(g2d);
        }
        
        // Draw projectiles
        for (Projectile projectile : projectiles) {
            projectile.draw(g2d);
        }
        
        // Draw spaceships
        for (Spaceship ship : spaceships) {
            ship.draw(g2d);
        }
        
        // Draw HUD
        drawHUD(g2d);
        
        // Draw game over screen if needed
        if (gameOver) {
            drawGameOver(g2d);
        }
    }
    
    private void drawBackground(Graphics2D g2d) {
        // Draw stars
        g2d.setColor(Color.WHITE);
        for (int i = 0; i < 100; i++) {
            int size = (int)(Math.random() * 3) + 1;
            g2d.fillOval((int)(Math.random() * WIDTH), (int)(Math.random() * HEIGHT), size, size);
        }
    }
    
    private void drawPath(Graphics2D g2d) {
        g2d.setColor(new Color(50, 50, 100));
        g2d.setStroke(new BasicStroke(30, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        
        for (int i = 0; i < path.length - 1; i++) {
            g2d.drawLine((int)path[i].x, (int)path[i].y, (int)path[i+1].x, (int)path[i+1].y);
        }
        
        // Path borders
        g2d.setColor(new Color(100, 100, 200));
        g2d.setStroke(new BasicStroke(32, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND, 0, new float[]{10, 10}, 0));
        
        for (int i = 0; i < path.length - 1; i++) {
            g2d.drawLine((int)path[i].x, (int)path[i].y, (int)path[i+1].x, (int)path[i+1].y);
        }
    }
    
    private void drawPlacementLocations(Graphics2D g2d) {
        g2d.setColor(new Color(0, 255, 0, 100));
        
        for (Point loc : placementLocations) {
            boolean occupied = false;
            
            // Check if tower already exists at this location
            for (Tower tower : towers) {
                if (tower.getX() == loc.x && tower.getY() == loc.y) {
                    occupied = true;
                    break;
                }
            }
            
            if (!occupied) {
                g2d.fillRect(loc.x - 20, loc.y - 20, 40, 40);
                g2d.setColor(new Color(0, 255, 0, 200));
                g2d.drawRect(loc.x - 20, loc.y - 20, 40, 40);
                g2d.setColor(new Color(0, 255, 0, 100));
            }
        }
    }
    
    private void drawHUD(Graphics2D g2d) {
        g2d.setColor(Color.WHITE);
        g2d.setFont(new Font("Arial", Font.BOLD, 16));
        
        // Draw money
        g2d.drawString("CREDITS: " + money, 10, 30);
        
        // Draw health
        g2d.drawString("HEALTH: " + health, 10, 50);
        
        // Draw round
        g2d.drawString("ROUND: " + round, 10, 70);
        
        // Draw tower cost
        g2d.drawString("TOWER COST: 50", 10, 90);
    }
    
    private void drawGameOver(Graphics2D g2d) {
        g2d.setColor(new Color(0, 0, 0, 150));
        g2d.fillRect(0, 0, WIDTH, HEIGHT);
        
        g2d.setColor(Color.RED);
        g2d.setFont(new Font("Arial", Font.BOLD, 40));
        g2d.drawString("GAME OVER", WIDTH/2 - 120, HEIGHT/2);
        
        g2d.setColor(Color.WHITE);
        g2d.setFont(new Font("Arial", Font.BOLD, 20));
        g2d.drawString("You survived " + round + " rounds", WIDTH/2 - 100, HEIGHT/2 + 40);
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Space Tower Defense");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setResizable(false);
            frame.add(new SpaceTowerDefense());
            frame.pack();
            frame.setLocationRelativeTo(null);
            frame.setVisible(true);
        });
    }
    
    //--------------------------------------------------------------------------
// GAME ENTITIES
//--------------------------------------------------------------------------

// Base Entity class for position and collision detection
    abstract class Entity {

        protected float x, y;
        protected int width, height;

        public Entity(float x, float y, int width, int height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }

        public float getX() {
            return x;
        }

        public float getY() {
            return y;
        }

        public boolean contains(int pointX, int pointY) {
            return pointX >= x - width / 2 && pointX <= x + width / 2
                    && pointY >= y - height / 2 && pointY <= y + height / 2;
        }

        public boolean collidesWith(Entity other) {
            return Math.abs(this.x - other.x) < (this.width + other.width) / 2
                    && Math.abs(this.y - other.y) < (this.height + other.height) / 2;
        }

        public abstract void draw(Graphics2D g);
    }

//--------------------------------------------------------------------------
// SPACESHIP CLASSES
//--------------------------------------------------------------------------
    abstract class Spaceship extends Entity {

        protected Point2D.Float[] path;
        protected int pathIndex = 0;
        protected float speed;
        protected int maxHealth;
        protected int health;
        protected int damage;  // Damage to player when reaching end
        protected int reward;  // Money earned when destroyed
        protected boolean isStealthed; // Whether the ship is stealthed

        public Spaceship(Point2D.Float[] path, int width, int height, int health, float speed, int damage, int reward) {
            super(path[0].x, path[0].y, width, height);
            this.path = path;
            this.speed = speed;
            this.maxHealth = health;
            this.health = health;
            this.damage = damage;
            this.reward = reward;
            this.isStealthed = false;
        }

        public void move() {
            if (pathIndex >= path.length - 1) {
                return;
            }

            // Calculate direction to next path point
            float targetX = path[pathIndex + 1].x;
            float targetY = path[pathIndex + 1].y;

            float dx = targetX - x;
            float dy = targetY - y;
            float distance = (float) Math.sqrt(dx * dx + dy * dy);

            if (distance <= speed) {
                // Reached current path point, move to next one
                pathIndex++;
                if (pathIndex < path.length - 1) {
                    move();
                }
            } else {
                // Move towards next path point
                x += dx / distance * speed;
                y += dy / distance * speed;
            }
        }

        public void takeDamage(int damage) {
            health -= damage;
        }

        public boolean isDestroyed() {
            return health <= 0;
        }

        public boolean hasReachedEnd() {
            return pathIndex >= path.length - 1;
        }

        public int getDamage() {
            return damage;
        }

        public int getReward() {
            return reward;
        }

        public boolean isStealthed() {
            return isStealthed;
        }

        @Override
        public void draw(Graphics2D g) {
            // Draw ship body
            g.setColor(getColor());
            drawShipBody(g);

            // Draw health bar
            int healthBarWidth = width;
            int healthBarHeight = 5;
            g.setColor(Color.RED);
            g.fillRect((int) (x - healthBarWidth / 2), (int) (y - height / 2 - 10), healthBarWidth, healthBarHeight);
            g.setColor(Color.GREEN);
            g.fillRect((int) (x - healthBarWidth / 2), (int) (y - height / 2 - 10),
                    (int) (healthBarWidth * (float) health / maxHealth), healthBarHeight);
        }

        protected abstract Color getColor();

        // New method for customizing ship appearance
        protected void drawShipBody(Graphics2D g) {
            // Default implementation draws a rectangle
            g.fillRect((int) (x - width / 2), (int) (y - height / 2), width, height);
        }

        // Method to spawn ships when destroyed (only used by MotherShip)
        public Spaceship[] spawnOnDestruction() {
            return new Spaceship[0]; // Default is no spawning
        }
    }

// Basic ship - standard enemy
    class BasicSpaceship extends Spaceship {

        public BasicSpaceship(Point2D.Float[] path) {
            super(path, 30, 20, 30, 1.0f, 10, 20);
        }

        @Override
        protected Color getColor() {
            return new Color(255, 0, 0); // Red
        }

        @Override
        protected void drawShipBody(Graphics2D g) {
            // Standard rectangular ship
            g.fillRect((int) (x - width / 2), (int) (y - height / 2), width, height);

            // Add some details
            g.setColor(Color.DARK_GRAY);
            g.fillRect((int) (x - width / 4), (int) (y - height / 2), width / 2, height / 4);
        }
    }

// Stealth ship - faster, less health, can only be targeted by sniper towers
    class StealthSpaceship extends Spaceship {

        public StealthSpaceship(Point2D.Float[] path) {
            super(path, 25, 15, 15, 1.8f, 15, 35); // Less health, faster, higher reward
            this.isStealthed = true; // Set stealth property to true
        }

        @Override
        protected Color getColor() {
            return new Color(100, 100, 200, 150); // Semi-transparent blue
        }

        @Override
        protected void drawShipBody(Graphics2D g) {
            // Create a more triangular, sleek shape
            int[] xPoints = {
                (int) (x - width / 2),
                (int) (x + width / 2),
                (int) x
            };

            int[] yPoints = {
                (int) (y + height / 2),
                (int) (y + height / 2),
                (int) (y - height / 2)
            };

            g.fillPolygon(xPoints, yPoints, 3);

            // Add a stealth effect (shimmer)
            Composite originalComposite = g.getComposite();
            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
            g.setColor(new Color(200, 200, 255, 100));
            g.drawOval((int) (x - width / 1.5), (int) (y - height / 1.5), (int) (width * 1.3), (int) (height * 1.3));
            g.setComposite(originalComposite);
        }
    }

// Mother ship - spawns 2 normal ships when destroyed, more health, slower
    class MotherShipSpaceship extends Spaceship {

        public MotherShipSpaceship(Point2D.Float[] path) {
            super(path, 45, 30, 60, 0.6f, 25, 50); // More health, slower, higher reward and damage
        }

        @Override
        protected Color getColor() {
            return new Color(128, 0, 128); // Purple
        }

        @Override
        protected void drawShipBody(Graphics2D g) {
            // Draw a hexagonal shape for the mother ship
            int sides = 6;
            int[] xPoints = new int[sides];
            int[] yPoints = new int[sides];

            for (int i = 0; i < sides; i++) {
                double angle = 2 * Math.PI * i / sides;
                xPoints[i] = (int) (x + Math.cos(angle) * width / 2);
                yPoints[i] = (int) (y + Math.sin(angle) * height / 2);
            }

            g.fillPolygon(xPoints, yPoints, sides);

            // Add central core
            g.setColor(new Color(200, 100, 200));
            g.fillOval((int) (x - width / 4), (int) (y - height / 4), width / 2, height / 2);
        }

        @Override
        public Spaceship[] spawnOnDestruction() {
            // When destroyed, spawn two normal ships at the current position
            Spaceship[] spawnedShips = new Spaceship[2];

            // Create two basic ships at the current path point
            Point2D.Float[] newPath = new Point2D.Float[path.length - pathIndex];
            System.arraycopy(path, pathIndex, newPath, 0, newPath.length);

            spawnedShips[0] = new BasicSpaceship(newPath, health, speed);
            spawnedShips[1] = new BasicSpaceship(newPath, health, speed);

            // Offset the ships slightly
            ((Entity) spawnedShips[0]).x += 15;
            ((Entity) spawnedShips[1]).x -= 15;

            return spawnedShips;
        }
    }

//--------------------------------------------------------------------------
// TOWER CLASSES
//--------------------------------------------------------------------------
    abstract class Tower extends Entity {

        protected int cost;
        protected int damage;
        protected int range;
        protected int fireRate;  // Milliseconds between shots
        protected long lastFireTime;
        protected int rotation = 0;  // Degrees, 0 = right, 90 = down, 180 = left, 270 = up
        protected Color color;
        protected boolean canTargetStealthed; // Whether the tower can target stealthed ships

        public Tower(float x, float y, int width, int height, int cost, int damage, int range, int fireRate, Color color, boolean canTargetStealthed) {
            super(x, y, width, height);
            this.cost = cost;
            this.damage = damage;
            this.range = range;
            this.fireRate = fireRate;
            this.lastFireTime = 0;
            this.color = color;
            this.canTargetStealthed = canTargetStealthed;
        }

        public void update() {
            // Perform any update logic
        }

        public boolean canFire() {
            return System.currentTimeMillis() - lastFireTime > fireRate;
        }

        public void rotate() {
            rotation = (rotation + 90) % 360;
        }

        public int getRange() {
            return range;
        }

        public int getCost() {
            return cost;
        }

        public boolean canTargetStealthed() {
            return canTargetStealthed;
        }

        public abstract Projectile fire(Spaceship target);

        // Method to find the best target from a list of spaceships
        public Spaceship findTarget(ArrayList<Spaceship> spaceships) {
            Spaceship bestTarget = null;
            float closestDistance = range + 1; // Initialize to just beyond range

            for (Spaceship ship : spaceships) {
                // Skip stealthed ships if this tower can't target them
                if (ship.isStealthed() && !canTargetStealthed) {
                    continue;
                }

                float distance = (float) Math.sqrt(
                        Math.pow(ship.getX() - this.x, 2)
                        + Math.pow(ship.getY() - this.y, 2)
                );

                if (distance <= range && distance < closestDistance) {
                    closestDistance = distance;
                    bestTarget = ship;
                }
            }

            return bestTarget;
        }

        @Override
        public void draw(Graphics2D g) {
            // Draw tower base
            drawTowerBase(g);

            // Draw tower cannon based on rotation
            drawTowerCannon(g);

            // Draw range indicator if selected
            if (selectedTower == this) {
                g.setColor(new Color(255, 255, 255, 50));
                g.fillOval((int) (x - range), (int) (y - range), range * 2, range * 2);
                g.setColor(new Color(255, 255, 255, 100));
                g.drawOval((int) (x - range), (int) (y - range), range * 2, range * 2);
            }
        }

        // New methods for customizing tower appearance
        protected void drawTowerBase(Graphics2D g) {
            g.setColor(color);
            g.fillRect((int) (x - width / 2), (int) (y - height / 2), width, height);
        }

        protected void drawTowerCannon(Graphics2D g) {
            g.setColor(Color.GRAY);
            int cannonLength = width;
            int cannonWidth = width / 3;

            g.translate(x, y);
            g.rotate(Math.toRadians(rotation));
            g.fillRect(0, -cannonWidth / 2, cannonLength, cannonWidth);
            g.rotate(-Math.toRadians(rotation));
            g.translate(-x, -y);
        }
    }

// Basic tower - standard rapid-fire tower
    class BasicTower extends Tower {

        public BasicTower(float x, float y) {
            super(x, y, 30, 30, 50, 10, 150, 500, Color.BLUE, false); // Faster fire rate (500ms)
        }

        @Override
        public BasicProjectile fire(Spaceship target) {
            if (!canFire() || target == null) {
                return null;
            }

            lastFireTime = System.currentTimeMillis();

            // Calculate direction to target
            float dirX = target.getX() - x;
            float dirY = target.getY() - y;

            // Update rotation based on direction
            updateRotationToTarget(dirX, dirY);

            return new BasicProjectile(x, y, dirX, dirY, damage);
        }

        // Helper method to update rotation based on target direction
        protected void updateRotationToTarget(float dirX, float dirY) {
            double angle = Math.toDegrees(Math.atan2(dirY, dirX));

            // Convert to nearest 90-degree increment for the 4 directions
            rotation = (int) (Math.round(angle / 90) * 90);
            if (rotation < 0) {
                rotation += 360;
            }
        }
    }

// Explosive tower - medium fire rate, splash damage
    class ExplosiveTower extends Tower {

        public ExplosiveTower(float x, float y) {
            super(x, y, 35, 35, 100, 8, 120, 1200, new Color(255, 120, 0), false); // Medium fire rate, orange color
        }

        @Override
        public ExplosiveProjectile fire(Spaceship target) {
            if (!canFire() || target == null) {
                return null;
            }

            lastFireTime = System.currentTimeMillis();

            // Calculate direction to target
            float dirX = target.getX() - x;
            float dirY = target.getY() - y;

            // Update rotation based on direction
            updateRotationToTarget(dirX, dirY);

            return new ExplosiveProjectile(x, y, dirX, dirY, damage);
        }

        protected void updateRotationToTarget(float dirX, float dirY) {
            double angle = Math.toDegrees(Math.atan2(dirY, dirX));

            // Convert to nearest 90-degree increment
            rotation = (int) (Math.round(angle / 90) * 90);
            if (rotation < 0) {
                rotation += 360;
            }
        }

        @Override
        protected void drawTowerBase(Graphics2D g) {
            // Draw a circular base for explosive tower
            g.setColor(color);
            g.fillOval((int) (x - width / 2), (int) (y - height / 2), width, height);

            // Add details
            g.setColor(new Color(180, 80, 0));
            g.fillOval((int) (x - width / 4), (int) (y - height / 4), width / 2, height / 2);
        }

        @Override
        protected void drawTowerCannon(Graphics2D g) {
            g.setColor(new Color(80, 80, 80));
            int cannonLength = width;
            int cannonWidth = width / 2; // Wider cannon for explosive tower

            g.translate(x, y);
            g.rotate(Math.toRadians(rotation));

            // Draw a more barrel-like cannon
            g.fillRect(0, -cannonWidth / 2, cannonLength, cannonWidth);
            g.setColor(new Color(220, 100, 0));
            g.fillOval(cannonLength - cannonWidth / 2, -cannonWidth / 4, cannonWidth / 2, cannonWidth / 2);

            g.rotate(-Math.toRadians(rotation));
            g.translate(-x, -y);
        }
    }

// Sniper tower - high damage, slow fire rate, can target stealthed ships
    class SniperTower extends Tower {

        public SniperTower(float x, float y) {
            super(x, y, 28, 40, 150, 25, 250, 2000, new Color(50, 100, 50), true); // Higher damage, slower fire rate, longer range, can target stealthed
        }

        @Override
        public SniperProjectile fire(Spaceship target) {
            if (!canFire() || target == null) {
                return null;
            }

            lastFireTime = System.currentTimeMillis();

            // Calculate direction to target
            float dirX = target.getX() - x;
            float dirY = target.getY() - y;

            // Update rotation based on direction
            updateRotationToTarget(dirX, dirY);

            return new SniperProjectile(x, y, dirX, dirY, damage);
        }

        protected void updateRotationToTarget(float dirX, float dirY) {
            // Sniper can rotate to exact angle, not just 90-degree increments
            rotation = (int) Math.toDegrees(Math.atan2(dirY, dirX));
        }

        @Override
        protected void drawTowerBase(Graphics2D g) {
            // Draw a taller, thinner base for sniper tower
            g.setColor(color);
            g.fillRect((int) (x - width / 2), (int) (y - height / 2), width, height);

            // Add details - scope
            g.setColor(new Color(30, 30, 30));
            g.fillRect((int) (x - width / 4), (int) (y - height / 2), width / 2, height / 10);
        }

        @Override
        protected void drawTowerCannon(Graphics2D g) {
            g.setColor(new Color(70, 70, 70));
            int cannonLength = width * 2; // Longer barrel for sniper
            int cannonWidth = width / 4; // Thinner barrel

            g.translate(x, y);
            g.rotate(Math.toRadians(rotation));

            // Draw long sniper barrel
            g.fillRect(0, -cannonWidth / 2, cannonLength, cannonWidth);

            // Draw scope
            g.setColor(new Color(0, 0, 0));
            g.fillRect(cannonLength / 3, -cannonWidth * 2, cannonWidth * 3, cannonWidth);
            g.setColor(new Color(100, 200, 255));
            g.fillOval(cannonLength / 3 + cannonWidth, -cannonWidth * 2, cannonWidth, cannonWidth);

            g.rotate(-Math.toRadians(rotation));
            g.translate(-x, -y);
        }
    }

//--------------------------------------------------------------------------
// PROJECTILE CLASSES
//--------------------------------------------------------------------------
    abstract class Projectile extends Entity {

        protected float velocityX, velocityY;
        protected float speed;
        protected int damage;
        protected int splashRadius; // Radius for splash damage, 0 for no splash

        public Projectile(float x, float y, float dirX, float dirY, int width, int height, float speed, int damage, int splashRadius) {
            super(x, y, width, height);
            this.speed = speed;
            this.damage = damage;
            this.splashRadius = splashRadius;

            // Normalize direction vector
            float length = (float) Math.sqrt(dirX * dirX + dirY * dirY);
            if (length > 0) {
                this.velocityX = dirX / length * speed;
                this.velocityY = dirY / length * speed;
            } else {
                this.velocityX = 0;
                this.velocityY = 0;
            }
        }

        public void move() {
            x += velocityX;
            y += velocityY;
        }

        public int getDamage() {
            return damage;
        }

        public int getSplashRadius() {
            return splashRadius;
        }

        // Method for handling splash damage
        public ArrayList<Spaceship> getSplashTargets(ArrayList<Spaceship> allShips, Spaceship mainTarget) {
            if (splashRadius <= 0) {
                return new ArrayList<>(); // No splash, so no additional targets
            }

            ArrayList<Spaceship> targetsInSplash = new ArrayList<>();

            for (Spaceship ship : allShips) {
                // Skip the primary target
                if (ship == mainTarget) {
                    continue;
                }

                // Check if ship is within splash radius
                float distance = (float) Math.sqrt(
                        Math.pow(ship.getX() - x, 2)
                        + Math.pow(ship.getY() - y, 2)
                );

                if (distance <= splashRadius) {
                    targetsInSplash.add(ship);
                }
            }

            return targetsInSplash;
        }

        public boolean isOffScreen(int screenWidth, int screenHeight) {
            return x < -width || x > screenWidth + width
                    || y < -height || y > screenHeight + height;
        }
    }

// Basic projectile - standard single-target damage
    class BasicProjectile extends Projectile {

        public BasicProjectile(float x, float y, float dirX, float dirY, int damage) {
            super(x, y, dirX, dirY, 8, 8, 8.0f, damage, 0); // No splash radius
        }

        @Override
        public void draw(Graphics2D g) {
            g.setColor(Color.YELLOW);
            g.fillOval((int) (x - width / 2), (int) (y - height / 2), width, height);
        }
    }

// Explosive projectile - lower damage but with splash
    class ExplosiveProjectile extends Projectile {

        public ExplosiveProjectile(float x, float y, float dirX, float dirY, int damage) {
            super(x, y, dirX, dirY, 12, 12, 4.0f, damage, 60); // Slower speed, larger size, splash radius of 60
        }

        @Override
        public void draw(Graphics2D g) {
            // Draw explosive projectile with a different look
            g.setColor(new Color(255, 100, 0)); // Orange
            g.fillOval((int) (x - width / 2), (int) (y - height / 2), width, height);

            // Add explosive effect
            g.setColor(new Color(255, 200, 0, 100)); // Semi-transparent yellow
            g.drawOval((int) (x - width), (int) (y - height), width * 2, height * 2);

            // Add a fuse effect
            g.setColor(new Color(255, 50, 50));
            g.drawLine((int) x, (int) y, (int) (x - velocityX / 2), (int) (y - velocityY / 2));
        }
    }

// Sniper projectile - high damage, can hit stealthed ships
    class SniperProjectile extends Projectile {

        public SniperProjectile(float x, float y, float dirX, float dirY, int damage) {
            super(x, y, dirX, dirY, 6, 15, 12.0f, damage, 0); // Fast, no splash, thin and long
        }

        @Override
        public void draw(Graphics2D g) {
            // Calculate angle of projectile direction
            double angle = Math.atan2(velocityY, velocityX);

            // Draw a line instead of a circle
            g.setColor(new Color(200, 200, 255)); // Light blue

            // Save the original transform
            AffineTransform originalTransform = g.getTransform();

            // Translate and rotate to draw the projectile
            g.translate(x, y);
            g.rotate(angle);

            // Draw the projectile body
            g.fillRect(-width / 2, -height / 2, width, height);

            // Add a tracer effect
            g.setColor(new Color(100, 100, 255, 150)); // Semi-transparent blue
            g.fillRect(-width * 2, -height / 4, width * 2, height / 2);

            // Restore the original transform
            g.setTransform(originalTransform);
        }
    }
}
